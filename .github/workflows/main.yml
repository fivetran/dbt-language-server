name: CI

on:
  push:
    branches:
    tags:

jobs:
  test-and-package:
    runs-on: macos-latest
    
    outputs:
      vsix_name: ${{ steps.vars.outputs.vsix_name }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up node 14.x
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: build and test
        run: |
          npm install
          npm run compile
          npm run lint
          npm run test

      - name: package to vsix file
        run: npx vsce package -o dbt-language-server.vsix --baseImagesUrl=https://storage.googleapis.com/dbt-ls-images

      - name: save vsix name with sha
        id: vars
        run: echo "::set-output name=vsix_name::dbt-language-server-commit-sha-${GITHUB_SHA::7}.vsix"

      - name: create cache
        uses: actions/cache@v2
        with:
          path: |
            ./e2e
            ./dbt-language-server.vsix
          key: ${{ runner.os }}-cache-${{ github.sha }}-${{ github.ref }}

  run-e2e-tests:
    needs: test-and-package

    strategy:
      fail-fast: false
      matrix:
        dbt-version: ['dbt-bigquery==0.20.2', 'dbt-bigquery'] # Run tests on latest version and version used in https://github.com/fivetran/analytics/blob/main/dbt_ft_prod/deployment.yml#L1

    runs-on: macos-latest
    steps:
      - name: load e2e tests and vsix from cache
        uses: actions/cache@v2
        with:
          path: |
            ./e2e
            ./dbt-language-server.vsix
          key: ${{ runner.os }}-cache-${{ github.sha }}-${{ github.ref }}

      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7.x'

      - name: prepare profile config
        run: |
          mkdir -p ~/.dbt/
          echo "$BQ_SERVICE_ACCOUNT" > ~/.dbt/bq-test-project.json

          user=$(whoami)
          keyFilePath=$(eval echo "~${user}")/.dbt/bq-test-project.json

          private_key=$(echo ${BQ_SERVICE_ACCOUNT} | jq '.private_key')
          read project_id private_key_id client_id client_email auth_uri token_uri auth_provider_x509_cert_url client_x509_cert_url < <(echo $(echo ${BQ_SERVICE_ACCOUNT} | jq -r '.project_id, .private_key_id, .client_id, .client_email, .auth_uri, .token_uri, .auth_provider_x509_cert_url, .client_x509_cert_url'))
          dataset="transforms_dbt_default"

          cat <<EOT > ~/.dbt/profiles.yml
          e2e-test-project:
            target: prod
            outputs:
              prod:
                type: bigquery
                method: service-account
                project: ${project_id}
                keyfile: ${keyFilePath}
                dataset: ${dataset}
                threads: 4

          e2e-test-workspace-project1:
            target: prod
            outputs:
              prod:
                type: bigquery
                method: service-account-json
                project: ${project_id}
                dataset: ${dataset}
                threads: 4
                keyfile_json:
                  type: service_account
                  project_id: ${project_id}
                  private_key_id: ${private_key_id}
                  private_key: ${private_key}
                  client_id: ${client_id}
                  client_email: ${client_email}
                  auth_uri: ${auth_uri}
                  token_uri: ${token_uri}
                  auth_provider_x509_cert_url: ${auth_provider_x509_cert_url}
                  client_x509_cert_url: ${client_x509_cert_url}

          e2e-test-workspace-project2:
            target: prod
            outputs:
              prod:
                type: bigquery
                method: service-account
                project: ${project_id}
                keyfile: ${keyFilePath}
                dataset: ${dataset}
                threads: 4
          EOT
        env:
          BQ_SERVICE_ACCOUNT: ${{ secrets.BQ_SERVICE_ACCOUNT }}
      
      - name: install dbt
        run: |
          pip install ${{ matrix.dbt-version }}

      - name: show dbt version
        run: dbt --version

      - run: unzip dbt-language-server.vsix -d e2e-tests
      - run: node e2e/out/runTest $(pwd)/e2e-tests/extension

      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.dbt-version }}
          path: ~/Library/Application\ Support/Code/logs/**/*dbt Language Server.log

  publish:
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }} # main branch or have any tag started with 'v'
    needs: [test-and-package, run-e2e-tests]

    runs-on: macos-latest
    steps:
      - name: load vsix from cache
        uses: actions/cache@v2
        with:
          path: |
            ./e2e
            ./dbt-language-server.vsix
          key: ${{ runner.os }}-cache-${{ github.sha }}-${{ github.ref }}

      - name: prepare vsix for push to GCS
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          VSIX_NAME: ${{ needs.test-and-package.outputs.vsix_name }}
        run: cp dbt-language-server.vsix ${VSIX_NAME}

      - name: push main to GCS
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: ${{ needs.test-and-package.outputs.vsix_name }}
          destination: dbt-language-server
          credentials: ${{ secrets.GCS_SERVICE_ACCOUNT }}

      - name: set up node 14.x
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: publish tagged (latest) extension
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
        run: npx vsce publish -i dbt-language-server.vsix -p ${VSCE_TOKEN}
