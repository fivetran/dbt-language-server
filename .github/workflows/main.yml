name: CI

on:
  push:
    branches:
    tags:

jobs:
  test-and-package:
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: darwin-x64
            zetasql-lib: libremote_server.dylib

          - os: ubuntu-latest
            target: linux-x64
            zetasql-lib: libremote_server.so

          - os: ubuntu-latest
            target: win32-x64
            zetasql-lib:

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up node 16.x
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: build and test
        run: |
          npm install
          npm run build
          npm run lint
          npm run test

      - name: set environment variable with file name
        run: echo "FILE_NAME=${{ github.sha }}-${{ matrix.target }}.vsix" >> $GITHUB_ENV

      - name: delete libraries for other platforms
        run: |
          cd server/node_modules/@fivetrandevelopers/zetasql/lib/zetasql/
          find . ! -name '${{ matrix.zetasql-lib }}' -type f -exec rm -f {} +

      - name: package to vsix file
        run: npx vsce package -o ${FILE_NAME} --target ${{ matrix.target }}

      - name: create cache
        uses: actions/cache@v2
        with:
          path: ./${{ env.FILE_NAME }}
          key: ${{ env.FILE_NAME }}

  run-e2e-tests:
    needs: test-and-package

    strategy:
      fail-fast: false
      matrix:
        include: # Run tests on latest version and version used in https://github.com/fivetran/analytics/blob/main/dbt_ft_prod/deployment.yml#L1
          - dbt-version: 'dbt-bigquery==0.20.2'
            os: macos-latest
            target: darwin-x64
            activate-venv: source ~/dbt_0_20_1_env/bin/activate
          
          - dbt-version: 'dbt-bigquery dbt-rpc'
            os: macos-latest
            target: darwin-x64
            activate-venv: source ~/dbt_0_20_1_env/bin/activate

          - dbt-version: 'dbt-bigquery dbt-rpc'
            os: ubuntu-latest
            target: linux-x64
            prepare-for-tests: |
              Xvfb -ac :99 -screen 0 1280x1024x16 &
              export DISPLAY=:99
            activate-venv: source ~/dbt_0_20_1_env/bin/activate

          # TODO: enable this tests after implementing CLI support
          # - dbt-version: 'dbt-bigquery dbt-rpc'
          #   os: windows-latest
          #   target: win32-x64
          #   add-colon-to-key-file-path: |
          #     homedir=c:/${homedir#*c/}
          #     python=${homedir}/dbt_0_20_1_env/Scripts/python
          #     cat <<EOT > ${GITHUB_WORKSPACE}/e2e/projects/special-python-settings/.vscode/settings.json
          #     {
          #       "python.defaultInterpreterPath": "${python}",
          #       "python.pythonPath": "${python}",
          #     }
          #     EOT
          #   activate-venv: |
          #     cd ~/dbt_0_20_1_env/Scripts
          #     . activate

    name: e2e-${{ matrix.target }} ${{ matrix.dbt-version }} ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: set environment variable with file name
        run: echo "FILE_NAME=${{ github.sha }}-${{ matrix.target }}.vsix" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v2

      - name: fix cache issue on windows (use GNU tar instead BSD tar) # https://github.com/actions/toolkit/issues/552
        if: matrix.os == 'windows-latest'
        run: echo "C:/Program Files/Git/usr/bin/" >> $GITHUB_PATH

      - name: load e2e tests and vsix from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ./${{ env.FILE_NAME }}
          key: ${{ env.FILE_NAME }}

      - name: fail if cache not hit
        if: steps.cache.outputs.cache-hit != 'true'
        run: exit 1

      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: build tests
        run: | # ignore postinstall script and install dependencies for e2e
          npm install --ignore-scripts
          cd e2e
          npm install
          npx tsc --sourceMap false --project tsconfig.json

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7.x'

      - name: add custom python venv with dbt@0.20.1
        run: | # https://github.com/dbt-labs/dbt-core/issues/4745
          python -m venv ~/dbt_0_20_1_env
          ${{ matrix.activate-venv }}
          pip install --force-reinstall MarkupSafe==2.0.1
          pip install dbt==0.20.1
          dbt --version

      - name: prepare profile config
        run: |
          mkdir -p ~/.dbt/
          echo "$BQ_SERVICE_ACCOUNT" > ~/.dbt/bq-test-project.json

          user=$(whoami)
          homedir=$(eval echo "~${user}")
          ${{ matrix.add-colon-to-key-file-path }}
          keyFilePath=${homedir}/.dbt/bq-test-project.json
          echo ${keyFilePath}

          private_key=$(echo ${BQ_SERVICE_ACCOUNT} | jq '.private_key')
          read project_id private_key_id client_id client_email auth_uri token_uri auth_provider_x509_cert_url client_x509_cert_url < <(echo $(echo ${BQ_SERVICE_ACCOUNT} | jq -r '.project_id, .private_key_id, .client_id, .client_email, .auth_uri, .token_uri, .auth_provider_x509_cert_url, .client_x509_cert_url'))
          dataset="transforms_dbt_default"

          cat <<EOT > ~/.dbt/profiles.yml
          e2e-test-project:
            target: prod
            outputs:
              prod:
                type: bigquery
                method: service-account
                project: ${project_id}
                keyfile: ${keyFilePath}
                dataset: ${dataset}
                threads: 4

          e2e-test-workspace-project1:
            target: prod
            outputs:
              prod:
                type: bigquery
                method: service-account-json
                project: ${project_id}
                dataset: ${dataset}
                threads: 4
                keyfile_json:
                  type: service_account
                  project_id: ${project_id}
                  private_key_id: ${private_key_id}
                  private_key: ${private_key}
                  client_id: ${client_id}
                  client_email: ${client_email}
                  auth_uri: ${auth_uri}
                  token_uri: ${token_uri}
                  auth_provider_x509_cert_url: ${auth_provider_x509_cert_url}
                  client_x509_cert_url: ${client_x509_cert_url}

          e2e-test-workspace-project2:
            target: prod
            outputs:
              prod:
                type: bigquery
                method: service-account
                project: ${project_id}
                keyfile: ${keyFilePath}
                dataset: ${dataset}
                threads: 4
          EOT
        env:
          BQ_SERVICE_ACCOUNT: ${{ secrets.BQ_SERVICE_ACCOUNT }}
          GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }}

      - name: show prepared files
        run: |
          cd ~/.dbt/
          pwd
          ls -la
      
      - name: install dbt
        run: pip install ${{ matrix.dbt-version }}

      - name: show dbt info
        run: |
          which dbt
          dbt --version

      # Uncomment lines below if you want to connect to the job via SSH
      # - name: Setup SSH via tmate for debugging
      #   uses: rdp-studio/ssh2actions@main
      #   env:
      #     TELEGRAM_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      #     TELEGRAM_CHAT_ID: ${{ secrets.CHAT_ID }}

      - run: unzip ${{ env.FILE_NAME }} -d e2e-tests
      
      - name: run e2e tests
        run: |
          ${{ matrix.prepare-for-tests }}
          node e2e/out/runTest $(pwd)/e2e-tests/extension

      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-${{ matrix.target }} ${{ matrix.dbt-version }} ${{ matrix.os }}
          path: ./.vscode-test/user-data/logs/**/*dbt Language Support.log

  publish:
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }} # main branch or have any tag started with 'v'
    needs: [test-and-package, run-e2e-tests]

    runs-on: macos-latest
    steps:
      - name: fix cache issue on windows (use GNU tar instead BSD tar) # https://github.com/actions/toolkit/issues/552
        if: matrix.os == 'windows-latest'
        run: echo "C:/Program Files/Git/usr/bin/" >> $GITHUB_PATH

      - name: load darwin-x64 vsix from cache
        id: darwin-cache
        uses: actions/cache@v2
        with:
          path: ./${{ env.VSIX_NAME }}
          key: ${{ env.VSIX_NAME }}
        env:
          VSIX_NAME: ${{ github.sha }}-darwin-x64.vsix

      - name: load linux-x64 vsix from cache
        id: linux-cache
        uses: actions/cache@v2
        with:
          path: ./${{ env.VSIX_NAME }}
          key: ${{ env.VSIX_NAME }}
        env:
          VSIX_NAME: ${{ github.sha }}-linux-x64.vsix

      - name: load win32-x64 vsix from cache
        id: windows-cache
        uses: actions/cache@v2
        with:
          path: ./${{ env.VSIX_NAME }}
          key: ${{ env.VSIX_NAME }}
        env:
          VSIX_NAME: ${{ github.sha }}-win32-x64.vsix

      - name: fail if cache not hit
        if: steps.darwin-cache.outputs.cache-hit != 'true' || steps.linux-cache.outputs.cache-hit != 'true' # TODO: add windows cache-hit
        run: exit 1

      - name: 'google auth using service account json'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCS_SERVICE_ACCOUNT }}'

      - name: push vsix files to GCS
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/linux-support' }}
        uses: google-github-actions/upload-cloud-storage@v0
        with:
          path: .
          glob: '*.vsix'
          destination: dbt-language-server

      - name: set up node 16.x
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: publish tagged (latest) extension
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
        run: npx vsce publish --packagePath $(find . -iname "*.vsix")
