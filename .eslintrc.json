{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "es2021",
    "sourceType": "module",
    "project": [
      "./common/tsconfig.json",
      "./server/tsconfig.json",
      "./client/tsconfig.json",
      "./e2e/tsconfig.json",
      "./markdown_parser/tsconfig.json"
    ]
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "sonarjs",
    "prettier",
    "promise",
    "eslint-plugin-unicorn"
  ],

  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/recommended",
    "plugin:sonarjs/recommended",
    "plugin:promise/recommended",
    "plugin:unicorn/recommended",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "no-param-reassign": ["error"],
    "prefer-template": ["error"],
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement"
    ],
    "default-case": ["error"],
    "no-underscore-dangle": ["error"],
    "consistent-return": ["error"],
    "operator-assignment": ["error"],
    "no-return-await": ["off"],
    "no-shadow": ["off"],
    "no-promise-executor-return": ["error"],
    "object-shorthand": ["error"],
    "no-path-concat": ["error"],
    "no-else-return": [
      "error",
      {
        "allowElseIf": false
      }
    ],
    "no-useless-constructor": ["off"],
    "prefer-destructuring": [
      "error",
      {
        "object": true,
        "array": false
      }
    ],
    "eqeqeq": ["error"],
    "no-redeclare": ["error"],
    "no-lonely-if": ["error"],
    "no-cond-assign": ["error"],
    "prefer-regex-literals": ["error"],
    "spaced-comment": ["error"],
    "no-implicit-coercion": ["error"],
    "prefer-promise-reject-errors": ["error"],
    "no-return-assign": ["error", "always"],
    "no-continue": ["error"],
    "no-void": ["error"],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ],
    "arrow-body-style": [
      "error",
      "as-needed",
      {
        "requireReturnForObjectLiteral": false
      }
    ],
    "import/newline-after-import": ["error"],
    "@typescript-eslint/no-unused-expressions": ["error"],
    "no-useless-return": ["error"],
    "prefer-arrow-callback": ["error"],
    "@typescript-eslint/quotes": [
      "error",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "func-names": ["error"],

    "@typescript-eslint/no-shadow": ["error"],
    "@typescript-eslint/explicit-function-return-type": ["error"],
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/return-await": ["error"],
    "@typescript-eslint/no-useless-constructor": ["error"],
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }
    ],
    "@typescript-eslint/no-unnecessary-condition": ["error"],
    "@typescript-eslint/no-unsafe-return": ["error"],
    "@typescript-eslint/no-floating-promises": [
      "error",
      { "ignoreVoid": false }
    ],
    "@typescript-eslint/no-misused-promises": [
      "error",
      { "checksVoidReturn": false }
    ],
    "@typescript-eslint/no-explicit-any": ["error"],
    "@typescript-eslint/no-unsafe-assignment": ["error"],
    "@typescript-eslint/no-unsafe-argument": ["error"],
    "@typescript-eslint/no-unsafe-member-access": ["error"],
    "@typescript-eslint/no-unsafe-call": ["error"],
    "@typescript-eslint/restrict-template-expressions": ["error"],

    "promise/catch-or-return": ["error", { "allowThen": true }],

    "unicorn/consistent-function-scoping": [
      "error",
      { "checkArrowFunctions": false }
    ],
    "unicorn/catch-error-name": [
      "error",
      {
        "name": "e"
      }
    ],

    "unicorn/prefer-event-target": ["off"], // Have false positives: https://github.com/sindresorhus/eslint-plugin-unicorn/issues/1853
    "unicorn/no-array-reduce": ["off"],
    "unicorn/consistent-destructuring": ["off"],
    "unicorn/no-null": ["off"],
    "unicorn/better-regex": ["off"],
    "unicorn/prefer-top-level-await": ["off"],
    "unicorn/prevent-abbreviations": ["off"],
    "unicorn/filename-case": ["off"],
    "unicorn/no-array-for-each": ["off"],
    "unicorn/no-useless-undefined": ["off"],
    "unicorn/prefer-module": ["off"],

    "sonarjs/cognitive-complexity": ["off"],
    "sonarjs/no-inverted-boolean-check": ["error"]
  },
  "ignorePatterns": ["**/*.d.ts"]
}
