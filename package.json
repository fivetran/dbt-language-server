{
  "name": "dbt-language-server",
  "displayName": "Wizard for dbt Core (TM)",
  "description": "This extension will help you work with dbt",
  "icon": "images/Icon.png",
  "version": "0.30.2",
  "publisher": "Fivetran",
  "license": "MIT",
  "preview": true,
  "keywords": [
    "dbt",
    "bigquery",
    "snowflake",
    "snowflake-sql",
    "sql"
  ],
  "homepage": "https://github.com/fivetran/dbt-language-server/blob/main/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/fivetran/dbt-language-server.git"
  },
  "bugs": {
    "url": "https://github.com/fivetran/dbt-language-server/issues",
    "email": "pavel@fivetran.com"
  },
  "extensionDependencies": [
    "ms-python.python"
  ],
  "engines": {
    "vscode": "^1.61.0"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./client/out/extension",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Wizard for dbt Core (TM)",
      "properties": {
        "WizardForDbtCore(TM).enableSnowflakeSyntaxCheck": {
          "type": "boolean",
          "default": true,
          "description": "Enabling this setting activates Snowflake syntax checks. As a result, any errors within Snowflake project models will be detected and displayed. Please note that this is an experimental feature and may yield false positive errors.",
          "scope": "resource"
        },
        "WizardForDbtCore(TM).profilesDir": {
          "type": "string",
          "description": "Which directory to look in for the profiles.yml file. Absolute path or relative to the directory containing dbt_project.yml. This parameter will be used in each dbt command.",
          "scope": "resource"
        },
        "WizardForDbtCore(TM).trace.server": {
          "scope": "window",
          "type": "string",
          "order": 2,
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        }
      }
    },
    "commands": [
      {
        "command": "WizardForDbtCore(TM).showQueryPreview",
        "title": "Show query preview",
        "category": "WizardForDbtCore(TM)",
        "icon": "$(book)"
      },
      {
        "command": "WizardForDbtCore(TM).notUseConfigForRefsPreview",
        "title": "âœ“ Use schema from config for refs",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).useConfigForRefsPreview",
        "title": "  Use schema from config for refs",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).compile",
        "title": "dbt compile",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).analyzeEntireProject",
        "title": "Analyze current project",
        "category": "WizardForDbtCore(TM)",
        "icon": "$(sync)"
      },
      {
        "command": "WizardForDbtCore(TM).createDbtProject",
        "title": "Create dbt Project",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).installDbtCore",
        "title": "Install dbt Core",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).installDbtAdapters",
        "title": "Install dbt Adapters",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).installDbtPackages",
        "title": "Install dbt Packages",
        "category": "WizardForDbtCore(TM)"
      },
      {
        "command": "WizardForDbtCore(TM).restart",
        "title": "Restart Wizard for dbt Core (TM)",
        "category": "WizardForDbtCore(TM)"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "WizardForDbtCore(TM).showQueryPreview",
          "group": "navigation",
          "when": "editorLangId =~ /^sql$|^jinja-sql$|^snowflake-sql$|^sql-bigquery$/ && !editorReadonly"
        },
        {
          "command": "WizardForDbtCore(TM).analyzeEntireProject",
          "group": "navigation"
        }
      ],
      "dbt": [
        {
          "command": "WizardForDbtCore(TM).compile",
          "group": "1_common"
        },
        {
          "command": "WizardForDbtCore(TM).showQueryPreview",
          "group": "1_common"
        },
        {
          "command": "WizardForDbtCore(TM).analyzeEntireProject",
          "group": "1_common"
        }
      ],
      "editor/context": [
        {
          "submenu": "dbt",
          "group": "navigation",
          "when": "editorLangId =~ /^sql$|^jinja-sql$|^snowflake-sql$|^sql-bigquery$/ && !editorReadonly"
        },
        {
          "command": "WizardForDbtCore(TM).useConfigForRefsPreview",
          "group": "1_common",
          "when": "resource == query-preview:Preview?dbt-language-server && !WizardForDbtCore:useConfigForRefs"
        },
        {
          "command": "WizardForDbtCore(TM).notUseConfigForRefsPreview",
          "group": "1_common",
          "when": "resource == query-preview:Preview?dbt-language-server && WizardForDbtCore:useConfigForRefs"
        }
      ]
    },
    "submenus": [
      {
        "id": "dbt",
        "label": "Wizard for dbt Core (TM)"
      }
    ]
  },
  "aiKey": "0a32611a-7944-4c4d-93c9-5c260a61395b",
  "size-limit": [
    {
      "path": "client/out/**/*"
    },
    {
      "path": "server/out/**/*.js"
    }
  ],
  "scripts": {
    "vscode:prepublish": "npm run webpack && ./prepare_node_modules.sh",
    "build": "tsc -b",
    "build:size": "npm run build && npm run vscode:prepublish",
    "watch": "tsc -b -w",
    "postinstall": "cd client && npm install --install-links=false && cd ../server && npm install --install-links=false && cd ../markdown_parser && npm install && cd ../e2e && npm install --install-links=false && cd ..",
    "lint": "eslint --cache . --ext .ts",
    "lint-config": "eslint --print-config .eslintrc.json",
    "lint-fix": "eslint . --ext .ts --fix",
    "ts-unused-exports": "ts-unused-exports tsconfig.json && ts-unused-exports server/tsconfig.json && ts-unused-exports client/tsconfig.json && ts-unused-exports e2e/tsconfig.json && ts-unused-exports markdown_parser/tsconfig.json",
    "test": "mocha",
    "clean": "rm -rf common/out client/out server/out e2e/out",
    "clean-node-modules": "rm -rf node_modules && rm -rf client/node_modules && rm -rf server/node_modules",
    "clean-install": "npm run clean && npm run clean-node-modules && npm ci",
    "webpack": "npm run clean && tsc --project common/tsconfig.json && webpack --mode production --config ./client/webpack.config.js && webpack --mode production --config ./server/webpack.config.js",
    "webpack:dev": "npm run clean && webpack --mode none --config ./client/webpack.config.js && webpack --mode none --config ./server/webpack.config.js",
    "prepare": "husky install"
  },
  "devDependencies": {
    "@size-limit/file": "^9.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^20.6.0",
    "@typescript-eslint/eslint-plugin": "^6.7.2",
    "@typescript-eslint/parser": "^6.7.0",
    "eslint": "^8.50.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.28.0",
    "eslint-plugin-prettier": "^5.0.0",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-sonarjs": "^0.21.0",
    "eslint-plugin-unicorn": "^48.0.1",
    "hamjest": "^4.1.0",
    "husky": "^8.0.3",
    "lint-staged": "^14.0.1",
    "merge-options": "^3.0.4",
    "mocha": "^10.2.0",
    "prettier": "^3.0.3",
    "prettier-plugin-organize-imports": "^3.2.3",
    "size-limit": "^9.0.0",
    "ts-loader": "^9.4.4",
    "ts-mockito": "^2.6.1",
    "ts-node": "^10.9.1",
    "ts-unused-exports": "^10.0.1",
    "typescript": "^5.2.2",
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4"
  },
  "lint-staged": {
    "*.ts": [
      "eslint --cache",
      "prettier --write"
    ]
  }
}
